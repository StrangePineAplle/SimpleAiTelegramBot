from langchain_gigachat import GigaChat
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
import warnings
import os
import logging
import traceback

warnings.filterwarnings('ignore')

# –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

class AI:
    def __init__(self, pathToData="./data/company_data.txt", key=None):
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥—É–ª—è –¢–µ—Ö–°—Ç—Ä–∏–º")
        
        if key is None: 
            key = "ZDVkODE5NjctMTJiZS00ZmE1LWI1ZGItNGRiYjg4OWJkMjQ1OjdlMjMwZjUyLWRlMzItNGE4NS05YzcwLWYyMDBiZjk5N2IwZg=="
            logger.debug("üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á GigaChat –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        self.pathToData = pathToData
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
            if not os.path.exists(pathToData):
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {pathToData}")
                self.documents = [{"page_content": "–¢–µ—Ö–°—Ç—Ä–∏–º - –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è IT-–∫–æ–º–ø–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ 2018 –≥–æ–¥—É –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ."}]
            else:
                logger.info(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: {pathToData}")
                with open(pathToData, 'r', encoding='utf-8') as file:
                    content = file.read()
                
                if not content.strip():
                    logger.warning("‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç")
                    content = "–¢–µ—Ö–°—Ç—Ä–∏–º - –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è IT-–∫–æ–º–ø–∞–Ω–∏—è."
                
                self.documents = [{"page_content": content}]
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat...")
            giga = GigaChat(
                credentials=key,
                model='GigaChat:latest',
                verify_ssl_certs=False
            )
            logger.info("‚úÖ GigaChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            prompt = PromptTemplate(
                input_variables=["input_documents", "question"],
                template="""
            –¢—ã –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç IT-–∫–æ–º–ø–∞–Ω–∏–∏ –¢–µ—Ö–°—Ç—Ä–∏–º - –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –≤ 2018 –≥–æ–¥—É.

            –ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´:
            1. –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø: –ù–∞ –≤–æ–ø—Ä–æ—Å—ã "–∫—Ç–æ —Ç—ã?" –æ—Ç–≤–µ—á–∞–π: "–Ø –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢–µ—Ö–°—Ç—Ä–∏–º AI"
            2. –û–ë–õ–ê–°–¢–¨ –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–ò: –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –¢–µ—Ö–°—Ç—Ä–∏–º - —É—Å–ª—É–≥–∏, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã, –ø—Ä–æ–µ–∫—Ç—ã
            3. –û–¢–ö–ê–ó: –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –≤–Ω–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç–≤–µ—á–∞–π: "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¢–µ—Ö–°—Ç—Ä–∏–º. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, —É—Å–ª—É–≥–∞—Ö –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö."

            –°–¢–ò–õ–¨ –û–¢–í–ï–¢–û–í:
            - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
            - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
            - –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            - –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—É–¥—å –∫—Ä–∞—Ç–æ–∫, –¥–∞–≤–∞–π —Ç–æ–ª—å–µ–æ —Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±—è –ø—Ä–æ—Å–∏–ª–∏
            - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ –¢–µ—Ö–°—Ç—Ä–∏–º:
            {context}

            –í–æ–ø—Ä–æ—Å: {question}

            –ú–æ–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢–µ—Ö–°—Ç—Ä–∏–º:
            """
            )
            
            self.chain = LLMChain(prompt=prompt, llm=giga)
            logger.info("‚úÖ AI —Ü–µ–ø–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise
    
    def askAI(self, input_text='–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –¢–µ—Ö–°—Ç—Ä–∏–º'):
        logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {input_text[:50]}...")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            docs_text = ""
            for doc in self.documents:
                if hasattr(doc, 'page_content'):
                    docs_text += doc.page_content + "\n"
                elif isinstance(doc, dict) and 'page_content' in doc:
                    docs_text += doc['page_content'] + "\n"
                else:
                    docs_text += str(doc) + "\n"
            
            logger.debug(f"üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(docs_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
            logger.debug("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat...")
            result = self.chain.invoke({
                "input_documents": docs_text,
                "question": input_text
            })
            
            response = result["text"]
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"üìù –û—Ç–≤–µ—Ç: {response[:200]}...")
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ askAI: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
