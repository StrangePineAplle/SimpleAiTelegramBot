import telebot
from telebot import types
import os
from AI import AI
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.header import Header
from datetime import datetime
from dotenv import load_dotenv
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(funcName)s:%(lineno)d | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å (Docker logs)
        logging.FileHandler('./logs/bot.log', encoding='utf-8'),  # –§–∞–π–ª –ª–æ–≥–æ–≤
    ]
)

logger = logging.getLogger(__name__)

load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
token = os.getenv("TOKEN")
if not token:
    logger.critical("TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¢–µ—Ö–°—Ç—Ä–∏–º. Token: {token[:10]}...")

bot = telebot.TeleBot(token=token)

user_states = {}
button_states = {}
mistake = False

def check_email(email):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ email –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP"""
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ email: {email}")
    
    port = 0
    if "@gmail.com" in email:
        port = 587
        return "smtp.gmail.com", port
    elif "@mail.ru" in email:
        port = 25
        return "smtp.mail.ru", port
    elif "@yandex.ru" in email:
        port = 465
        return "smtp.yandex.ru", port
    elif "@zoho.com" in email:
        port = 587
        return "smtp.zoho.com", port
    else:
        logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø email: {email}")
        return None, None

def send_email(chat_id, email, password, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ SMTP"""
    logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    
    try:
        email_type, port = check_email(email)
        if email_type:
            getter = email
            sender = email
            
            msg = MIMEMultipart()
            subject = "–ó–∞–ø—Ä–æ—Å –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¢–µ—Ö–°—Ç—Ä–∏–º"
            msg['Subject'] = Header(subject, 'utf-8')
            msg['From'] = sender
            msg['To'] = getter
            
            msg.attach(MIMEText(message, 'plain', 'utf-8'))
            
            server = smtplib.SMTP(email_type, port)
            server.ehlo()
            server.starttls()
            server.ehlo()
            server.login(sender, password)
            server.sendmail(sender, getter, msg.as_string())
            server.quit()
            
            logger.info(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø email: {email}")
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_email: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"üëã –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} (ID: {message.from_user.id})")
    
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('/start')
        item2 = types.KeyboardButton('–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
        item3 = types.KeyboardButton('–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
        item4 = types.KeyboardButton('–°–ø—Ä–∞–≤–∫–∞')
        
        markup.add(item1, item2, item3, item4)
        button_states[message.from_user.id] = markup
        
        welcome_message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! –Ø –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢–µ—Ö–°—Ç—Ä–∏–º AI, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
        
        bot.send_message(message.from_user.id, welcome_message, reply_markup=markup)
        logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_command: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global mistake
    chat_id = message.chat.id
    text = message.text
    user_name = message.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {chat_id}): {text}")
    
    try:
        markup = button_states.get(message.from_user.id, None)
        
        email = os.getenv("EMAIL")
        password = os.getenv("PASS")
        
        if not email or not password:
            logger.error("‚ùå EMAIL –∏–ª–∏ PASS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            bot.send_message(chat_id, "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        if markup:
            if text == '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ':
                logger.info(f"üêõ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ'")
                mistake = True
                bot.send_message(message.from_user.id, 
                    "–û–ø–∏—à–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º", 
                    reply_markup=markup)
                    
            elif text == "–°–ø—Ä–∞–≤–∫–∞":
                logger.info(f"‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
                help_text = "–î–∞–Ω–Ω—ã–π –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ IT-–∫–æ–º–ø–∞–Ω–∏–∏ –¢–µ—Ö–°—Ç—Ä–∏–º, –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –∫–æ–º–ø–∞–Ω–∏–∏. –í —Å–ª—É—á–∞–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏' –∏–ª–∏ '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ'"
                bot.send_message(message.from_user.id, help_text, reply_markup=markup)
                
            elif text == '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏':
                logger.info(f"üÜò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ–±—Ä–∞—Ç–∏–ª—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
                support_text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ /support –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                bot.send_message(chat_id, support_text, reply_markup=markup)
                
            elif "/support" in text:
                logger.info(f"üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç {chat_id}")
                support_message = text.replace("/support ", "")
                send_email(chat_id=chat_id, email=email, password=password, message=support_message)
                
            else:
                if mistake:
                    logger.info(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ –æ—Ç {chat_id}")
                    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    
                    try:
                        os.makedirs('./logs', exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
                        with open("./logs/error_reports.txt", "a", encoding='utf-8') as file:
                            file.write(f"\n{user_name} | {current_time} | {message.text}")
                        
                        bot.send_message(message.from_user.id, 
                            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", 
                            reply_markup=markup)
                        mistake = False
                        logger.info(f"‚úÖ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç {chat_id}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
                        logger.error(f"Traceback: {traceback.format_exc()}")
                        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞", reply_markup=markup)
                        
                else:
                    logger.info(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI –æ—Ç {chat_id}: {text}")
                    
                    try:
                        chatAI = AI()
                        logger.debug("‚úÖ AI –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                        
                        ai_response = chatAI.askAI(input_text=message.text)
                        logger.debug(f"üìÑ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI: {ai_response[:100]}...")
                        
                        bot.send_message(message.from_user.id, ai_response, reply_markup=markup)
                        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç AI –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ AI_processing: {str(e)}")
                        logger.error(f"Traceback: {traceback.format_exc()}")
                        error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        bot.send_message(message.from_user.id, error_message, reply_markup=markup)
        else:
            logger.warning(f"‚ö†Ô∏è Markup –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            bot.send_message(message.from_user.id, 
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_text: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs('./logs', exist_ok=True)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling –¥–ª—è –±–æ—Ç–∞ –¢–µ—Ö–°—Ç—Ä–∏–º...")
    
    try:
        bot.polling(none_stop=True, interval=0)
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")
        logger.critical(f"Traceback: {traceback.format_exc()}")
